import numpy as np
import scipy.integrate as integrate
from pydl.pydlutils.cooling import read_ds_cooling



## BUILDING THE JET MODEL

## Number of radio samples
N = 50000



## Galaxy cluster halocentric radius

# scale-free radial scale
radius_bins = 500
s = np.logspace(-5, 1, base=10, num=radius_bins)



## Physical constants

# speed of light
c_light = 3*10**8 # m s^-1
# newton's gravitational constant
G = 6.6743*10**(-11) # m^3 kg^-1 s^-2
# the bolztmann constant
kB = 1.3806*10**(-23) # m^2 kg s^-2 K^-1
# proton mass
mp = 1.6726*10**(-27) # kg



## Cosmological constants

# hubble parameter
h = 0.6715
# present-day critical density of the universe
rho_crit = 1.8788*10**(-26)*h**2 # kg m^-3
# density parameters
Omega_b = 0.0486
Omega_DM = 0.2589
# fraction of baryon content
f_b = Omega_b/(Omega_b + Omega_DM)



## Unit conversions

# solar mass
Msol = 1.989*10**30 # kg
# megayear
Myr = 3.156*10**13 # s
# gigayear
Gyr = 3.156*10**16 # s
# kiloparsec
kpc = 3.086*10**19 # m
# megaparsec
Mpc = 3.086*10**22 # m



## Gas parameters

# mean molecular weight
mu = 0.6
# mean electron weight
mu_e = 1.148
# mean ion weight
mu_i = (1/mu + 1/mu_e)**(-1)
# adiabatic index
gamma = 5/3



## AGN jet parameters

# AGN duty cycle
duty = 0.1

# jet beam power constant
k1 = 1
# normalisation radius for jet environment
s0_index = np.argmin(np.abs(s.reshape(radius_bins, 1) - 0.01))

# jet half-opening angle
thetaJ = 8.5*np.pi/180 # rads
# FR-I half-opening angle
thetaFRI = 15*np.pi/180 # rads

# jet solid angle
Omega = 2*np.pi*(1 - np.cos(thetaJ))
# FR-I solid angle
Chi = 2*np.pi*(1 - np.cos(thetaFRI))



## Galaxy cluster environment
# to use the 'generalised cluster environment' profiles, see the functions in Sullivan et al. 2024b
# below we use the Perseus cluster environment from Churazov et al. 2023

# overdensity criterion
Delta = 500

# virial radius
rvir = 1.3*Mpc # m
# virial mass
Mvir = (4/3)*np.pi*Delta*rho_crit*(rvir)**3 # kg
# virial temperature
Tvir = (1/3)*(mu*mp/kB)*G*Mvir/rvir # K
# virial pressure
pvir = (kB*Tvir/(mu*mp))*f_b*Delta*rho_crit # Pa = kg m^-1 s^-2
# virial circular velocity
vcvir = (G*Mvir/rvir)**0.5 # m s^-1

# Perseus intracluster gas density
def Perseus_gas_density(s): # kg m^-3
    return mu_e*mp*10**6*(3.9*10**(-2)*(1 + (s*rvir/(80*kpc))**2)**(-1.8) + 4.05*10**(-3)*(1 + (s*rvir/(280*kpc))**2)**(-0.87))

# Perseus temperature profile
def Perseus_temperature(s): # K
    return 1.602*10**(-16)*((7*(1 + (s*rvir/(100*kpc))**3))/(2.3 + (s*rvir/(100*kpc))**3))/kB

# negative inner logarithmic slope of Perseus' gas density profile
e = 0

# halocentric radius
halo_radius = np.multiply(rvir, s)

# loading the intracluster gas density and temperature profiles
gas_density_profile = np.empty(radius_bins)
temperature_profile = np.empty(radius_bins)
for i in range(radius_bins):
    gas_density_profile[i] = Perseus_gas_density(s[i]) # kg m^-3
    temperature_profile[i] = Perseus_temperature(s[i]) # K
print('Perseus cluster profiles loaded')

# calculating the number density profiles
number_density_profile = np.divide(gas_density_profile, (mu*mp)) # m^-3
electron_density_profile = np.divide(gas_density_profile, mu_e*mp) # m^-3
hydrogen_density_profile = np.multiply((4/9), number_density_profile) # m^-3

# calculating the gas entropy profile
entropy_profile = kB*np.divide(temperature_profile, np.power(electron_density_profile, 2/3)) # J m^2

# calculating the thermal pressure profile and its radial derivative
th_pressure_profile = kB*np.multiply(temperature_profile, number_density_profile) # kg m^-1 s^-2
th_pressure_derivative = np.gradient(th_pressure_profile, halo_radius) # kg m^-2 s^-2

# calculating the sound speed profile
sound_speed_profile = np.sqrt(np.multiply(temperature_profile, (gamma*kB/(mu*mp)))) # m s^-1

# calculating the thermal velocity profile
th_velocity_profile = np.sqrt(np.multiply(temperature_profile, 3*kB/(mu*mp))) # m s^-1



## Cooling function

abundance_file='mzero.cie' # metallicity for Sutherland & Dopita (1993) cooling function, here correpsonding to solar abundances

# interperlating from the gas temperature to the cooling function
logT_cool, logLambda_cool = read_ds_cooling(abundance_file) # T in K, Lambda 13 dex higher than SI value
logLambda_cool_interp = np.interp(np.log10(temperature_profile), logT_cool, logLambda_cool-13) # log ( W m^3 )
# interpolated cooling function
Lambda_cool_interp = [10**i for i in logLambda_cool_interp] # W m^3

# cooling time
t_cool_profile = (3/2)*((mu_e+mu_i)/mu)*kB*np.divide(temperature_profile, np.multiply(Lambda_cool_interp, number_density_profile)) # s
# cooling function
cooling_rate = np.multiply(np.square(hydrogen_density_profile), Lambda_cool_interp) # W m^-3



## Population distribution functions

# power-law slope of jet age distribution
sT = -1
# power-law slope of jet power; low jet power regime
sQ1 = -1
# power-law slope of jet power; high jet power regime
sQ2 = -1.5

# normalisation coefficient for P = x^slope
def prob_normalisation(xmin, xmax, slope):
    if slope == -1:
        return 1/(np.log(xmax/xmin))
    else:
        return (slope+1)*(xmax**(slope+1) - xmin**(slope+1))**(-1)

# inverse cumualtive probability distribution for P = x^slope
def inv_distribution(u, xmin, xmax, slope):
    if slope == -1:
        return (xmin*np.exp(u/prob_normalisation(xmin, xmax, slope)))
    else:
        return (xmin**(slope+1) + u*(slope+1)/prob_normalisation(xmin, xmax, slope))**(1/(slope+1))

# normalisation coefficient for P = x^slope1, P = x^slope2, with a cut-off at Qcut
def prob_normalisation_dual_slope(xmin, xmax, xcut, slope1, slope2):
    if slope1 == -1:
        A2 = (xcut**(slope2+1)*np.log(xcut/xmin) + (xmax**(slope2+1) - xcut**(slope2+1))/(1+slope2))**(-1)
        A1 = A2*(xcut**(slope2+1))
        return [A1, A2]
    else:
        A2 = (xcut**(slope2-slope1)*(xcut**(slope1+1) - xmin**(slope1+1))/(1+slope1) + (xmax**(slope2+1) - xcut**(slope2+1))/(1+slope2))**(-1)
        A1 = A2*(xcut**(slope2-slope1))
        return [A1, A2]

# inverse cumulative probability distribution for P = x^slope1, P = x^slope2, with a cut-off at Qcut
def inv_distribution_dual_slope(u, xmin, xmax, xcut, slope1, slope2):
    A1 = prob_normalisation_dual_slope(xmin, xmax, xcut, slope1, slope2)[0]
    A2 = prob_normalisation_dual_slope(xmin, xmax, xcut, slope1, slope2)[1]
    output = np.empty(N)
    if slope1 == -1:
        for i in range(N):
            if u[i] <= A1*np.log(xcut/xmin):
                output[i] = (xmin * np.exp(u[i]/A1))
            elif u[i] > A1*np.log(xcut/xmin):
                output[i] = (xcut**(slope2+1) + ((slope2+1)/A2)*(u[i] - A1*np.log(xcut/xmin)))**(1/(slope2+1))
        return output
    else:
        for i in range(N):
            if u[i] <= (xcut**(slope1+1) - xmin**(slope1+1))*(A1/(slope1+1)):
                output[i] = (xmin**(slope1+1) + u[i]*(slope1+1)/A1)**(1/(slope1+1))
            elif u[i] > (xcut**(slope1+1) - xmin**(slope1+1))*(A1/(slope1+1)):
                output[i] = (xcut**(slope2+1) + u[i]*(slope2+1)/A2 - (A1*(slope1+1)/(A2*(slope2+1)))*(xcut**(slope1+1) - xmin**(slope1+1)))**(1/(slope2+1))
        return output



## Calibration to escape the brightest cluster galaxy (BCG)

# time offset as a function of jet power, calibrated from Young et al. 2024
def t_min(Q, e): # s
    return 1.27*Myr*(4/(4-e))*((3-e)/3)**0.5*(10**37/Q)**0.5



## Sampling the jet power distribution

# random real numbers on the interval [0, 1]
u_vals = np.random.rand(N)

# maximum jet power
Qmax = 10**40 # W
# minimum jet power, calibrated from Young+ in prep
Qmin = 10**37*(1.27*Myr/Gyr)**2*(4/(4-e))**2*((3-e)/3) # W

# sampling by a dual power-law probability distribution:
Qcut = 10**38 # W
Qjet_samples = inv_distribution_dual_slope(u_vals, Qmin, Qmax, Qcut, sQ1, sQ2) # W



## Sampling the jet age distribution

# random real numbers on the interval [0, 1]
u_vals = np.random.rand(N)

# minimum source age
tmin = 1*Myr # s
# maximum source age
tmax = 1*Gyr # s

# sampling source ages by their distribution:
age_samples = inv_distribution(u_vals, tmin, tmax, sT) # s



## Removing jets that cannot escape the central galaxy

# jet outburst time and escape time
toutburst_samples = np.empty(N)
tesc_samples = np.empty(N)
stuck_jet_indices = np.empty(N)
for i in range(N):
    if age_samples[i] > t_min(Qjet_samples[i], e):
        stuck_jet_indices[i] = np.nan
        tesc_samples[i] = t_min(Qjet_samples[i], e) # s
        toutburst_samples[i] = age_samples[i] - t_min(Qjet_samples[i], e) # s
    elif age_samples[i] <= t_min(Qjet_samples[i], e):
        stuck_jet_indices[i] = i
        tesc_samples[i] = np.nan
        toutburst_samples[i] = np.nan
stuck_jet_indices = stuck_jet_indices[~np.isnan(stuck_jet_indices)]
stuck_jet_indices = [int(i) for i in stuck_jet_indices]

# updating jet powers and jet times to remove jets that do not escape
Qjet_samples = [i for j, i in enumerate(Qjet_samples) if j not in stuck_jet_indices]
age_samples = [i for j, i in enumerate(age_samples) if j not in stuck_jet_indices]
toutburst_samples = [i for j, i in enumerate(toutburst_samples) if j not in stuck_jet_indices]
tesc_samples = [i for j, i in enumerate(tesc_samples) if j not in stuck_jet_indices]

# number and fraction of jets that escape the central galaxy
N_esc = len(toutburst_samples)
print(str(N_esc) + ' jets escape from the central galaxy')



## Removing jets that never reach pressure equilibrium

# jet equilibrium time
teq_samples = (2/(4-e))*(k1/(Omega*c_light))**((2-e)/4)*(gas_density_profile[s0_index]*(halo_radius[s0_index])**e)**(1/2)/((th_pressure_profile[s0_index])**((4-e)/4))*np.power(Qjet_samples, ((2-e)/4)) # s
does_not_flare_indices = np.empty(N_esc)
for i in range(N_esc):
    if toutburst_samples[i] > teq_samples[i]:
        does_not_flare_indices[i] = np.nan
    elif toutburst_samples[i] <= teq_samples[i]:
        does_not_flare_indices[i] = i
does_not_flare_indices = does_not_flare_indices[~np.isnan(does_not_flare_indices)]
does_not_flare_indices = [int(i) for i in does_not_flare_indices]

# updating jet powers and jet times to remove non-flaring jets
Qjet_samples = [i for j, i in enumerate(Qjet_samples) if j not in does_not_flare_indices]
age_samples = [i for j, i in enumerate(age_samples) if j not in does_not_flare_indices]
toutburst_samples = [i for j, i in enumerate(toutburst_samples) if j not in does_not_flare_indices]
tesc_samples = [i for j, i in enumerate(tesc_samples) if j not in does_not_flare_indices]
teq_samples = [i for j, i in enumerate(teq_samples) if j not in does_not_flare_indices]

# number and fraction of jets that reach pressure equilibrium
N_flare = len(toutburst_samples)
print(str(N_flare) + ' jets reach pressure equilibrium and flare')



## Evoluving jet outbursts in the model

# equilibrium jet lengths
Req_samples = (k1/(Omega*c_light*th_pressure_profile[s0_index]))**(1/2)*np.sqrt(Qjet_samples) # m

# jet length offset from 'flaring jet phase' up to pressure equilibrium
xeq_samples = np.tan(thetaJ)/np.tan(thetaFRI)*Req_samples # m

# 'flaring jet' time offset
tfj_samples = (1/2)*((4-e)/(3-e))*np.multiply(np.divide(xeq_samples, Req_samples), teq_samples) # s

# jet outburst length
adjusted_time_samples = np.add(np.subtract(toutburst_samples, teq_samples), tfj_samples) # s
Routburst_samples = np.add(np.subtract(Req_samples, xeq_samples), np.multiply(xeq_samples, np.power(np.divide(adjusted_time_samples, tfj_samples), 1/(3-e)))) # m

# jet outburst volume
Vjet_samples = np.empty(N_flare)
for i in range(N_flare):
    R = np.logspace(np.log10(Req_samples[i]), np.log10(Routburst_samples[i]), base=10, num=200)
    Vjet_samples[i] = 4*np.pi*integrate.quad(lambda R: R**2*(1 - R/np.sqrt(R**2 + (np.tan(thetaFRI)*(R - Req_samples[i] + xeq_samples[i]))**2)), Req_samples[i], Routburst_samples[i])[0] # m^3
Vjet_samples = np.add(4*np.pi*(1 - np.cos(thetaJ))*np.power(Req_samples, 3)/3, Vjet_samples) # m^3

# largest jet outburst
print('the largest jet reaches: ' + str(np.round(max(Routburst_samples)/kpc, decimals=2)) + 'kpc')



## Calculating the velocity kicks of each outburst

# gas velocity kicks per energy injection rate
velocity_per_volumetric_energy_rate = np.divide((gamma-1), (np.add(th_pressure_derivative, np.multiply(2*gamma, np.divide(th_pressure_profile, halo_radius))))) # m^2 s^2 kg^-1

# the volumetric heating rate
heating_rate_samples = np.divide(np.multiply(Qjet_samples, 2), Vjet_samples) # W m^-3

# the heating-induced velocity kick
heating_velocity_kick_samples = np.empty((N_flare, radius_bins))
for i in range(N_flare):
    heating_velocity_kick_samples[i] = velocity_per_volumetric_energy_rate*heating_rate_samples[i] # m s^-1

# the cooling-induced velocity kick
cooling_velocity_kicks = np.multiply(cooling_rate, velocity_per_volumetric_energy_rate) # m s^-1



## Calculating the effective feedback profiles of each outburst

# the filling factor of the cluster
filling_factor_samples = np.empty((N_flare, radius_bins))
unfilled_factor_samples = np.empty((N_flare, radius_bins))
for i in range(N_flare):
    Rjet_index = np.argmin(np.abs(halo_radius.reshape(radius_bins, 1) - Routburst_samples[i]))
    Req_index = np.argmin(np.abs(halo_radius.reshape(radius_bins, 1) - Req_samples[i]))
    for j in range(radius_bins):
            if j <= Req_index:
                filling_factor_samples[i, j] = (1 - np.cos(thetaJ))
                unfilled_factor_samples[i, j] = np.cos(thetaJ)
            elif Req_index < j <= Rjet_index:
                filling_factor_samples[i, j] = 1 - halo_radius[j]/np.sqrt(halo_radius[j]**2 + (np.tan(thetaFRI)*(halo_radius[j] - Req_samples[i] + xeq_samples[i]))**2)
                unfilled_factor_samples[i, j] = halo_radius[j]/np.sqrt(halo_radius[j]**2 + (np.tan(thetaFRI)*(halo_radius[j] - Req_samples[i] + xeq_samples[i]))**2)
            elif j > Rjet_index:
                filling_factor_samples[i, j] = 0
                unfilled_factor_samples[i, j] = 1

# calculating the effective energy injection and velocity kick profiles, weighted by their volume contribution
effective_velocity_kick_samples = np.empty((N_flare, radius_bins))
effective_energy_injection_samples = np.empty((N_flare, radius_bins))
for i in range(N_flare):
    effective_velocity_kick_samples[i] = np.sqrt(np.add(np.multiply(filling_factor_samples[i], duty*np.square(heating_velocity_kick_samples[i])), np.multiply(unfilled_factor_samples[i], np.square(cooling_velocity_kicks)))) # m s^-1
    effective_energy_injection_samples[i] = np.sqrt(np.add(np.multiply(filling_factor_samples[i], duty*np.square(heating_rate_samples[i])), np.multiply(unfilled_factor_samples[i], np.square(cooling_rate)))) # W m^-3

# calculating the NTP fraction
NTP_samples = np.empty((N_flare, radius_bins))
for i in range(N_flare):
    NTP_samples[i] = np.divide(np.square(effective_velocity_kick_samples[i]), np.add(np.square(effective_velocity_kick_samples[i]), np.square(th_velocity_profile))) # %



## Including the compact source population

# compact fraction
f_compact = 0.4
# number of compact sources to consider
N_compact = int(np.round(f_compact*N_flare/(1-f_compact), decimals=0))

# the cooling-only velocity kick and cooling-only volumetric energy injection rates
compact_source_velocity_samples = np.tile([cooling_velocity_kicks], (N_compact, 1)) # m s^-1
compact_energy_injection_samples = np.tile([cooling_rate], (N_compact, 1)) # W m^-3

# the cooling-only non-thermal pressure
cooling_only_NTP = np.divide(np.square(cooling_velocity_kicks), np.add(np.square(cooling_velocity_kicks), np.square(th_velocity_profile))) # %
cooling_only_NTP_samples = np.tile([cooling_only_NTP], (N_compact, 1)) # %



## Calculating the mean feedback profiles over all (extended + compact) sources

# calculating the mean effective gas velocity kicks (for extended + compact sources)
mean_effective_velocity = np.mean(np.concatenate((effective_velocity_kick_samples, compact_source_velocity_samples)), axis=0) # m s^-1

# calculating the mean effective volumetric energy injection rates (for extended + compact sources)
mean_effective_energy_injection = np.mean(np.concatenate((effective_energy_injection_samples, compact_energy_injection_samples)), axis=0) # W m^-3

# calculating the mean non-thermal pressure profiles (for extended + compact sources)
mean_NTP = np.mean(np.concatenate((NTP_samples, cooling_only_NTP_samples)), axis=0) # %

# the peak mean NTP fraction
print('the peak mean NTP fraction is: ' + str(np.round(100*np.max(mean_NTP), decimals=1)) + '%')
print('this peak occurs at a halo radius of: ' + str(np.round(halo_radius[np.argmin(np.abs(mean_NTP - np.max(mean_NTP)))]/kpc, decimals=2)) + 'kpc')

